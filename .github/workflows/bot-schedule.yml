# Arquivo de Workflow do GitHub Actions para o Projeto Sentinela
#
# Este workflow automatiza a execução do bot de postagens, rodando-o
# duas vezes ao dia em horários agendados.

name: Automação do Bot Sentinela

on:
  # O gatilho 'schedule' permite rodar a automação em horários específicos.
  schedule:
    # A sintaxe cron '0 15,21 * * *' significa:
    # - 0: no minuto 0
    # - 15,21: às 15:00 e 21:00
    # - * * *: todos os dias, de todos os meses, em qualquer dia da semana.
    # NOTA: Os horários são em UTC. 15:00 UTC = 12:00 Brasília | 21:00 UTC = 18:00 Brasília
    - cron: '0 15,21 * * *'

  # O gatilho 'workflow_dispatch' permite que você rode este workflow manualmente
  # a partir da aba "Actions" no seu repositório do GitHub. Útil para testes.
  workflow_dispatch:

jobs:
  run-bot:
    # O job vai rodar na versão mais recente do Ubuntu fornecida pelo GitHub.
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Baixar o código do repositório
      # A action 'checkout' baixa o seu código para dentro do ambiente de execução.
      - name: 1. Baixando o código do projeto
        uses: actions/checkout@v3

      # Passo 2: Baixar o estado anterior (se existir)
      # Isso garante que o bot continue de onde parou na última execução.
      - name: 2. Baixando estado anterior
        uses: actions/download-artifact@v4
        with:
          name: bot-state
          path: .

      # Passo 3: Configurar o ambiente Python
      # Esta action configura a versão do Python que queremos usar.
      - name: 3. Configurando o ambiente Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Passo 4: Instalar as dependências do projeto
      # Este passo usa o pip para instalar as bibliotecas listadas no requirements.txt.
      - name: 4. Instalando dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Passo 5: Rodando o script principal do bot
      # Este é o comando principal que roda a sua lógica.
      # As variáveis de ambiente (env) são preenchidas de forma segura usando
      # os "Secrets" do GitHub, que você configurará no seu repositório.
      - name: 5. Rodando o bot Sentinela
        run: python3 -m src.main
        env:
          X_API_KEY: ${{ secrets.X_API_KEY }}
          X_API_SECRET: ${{ secrets.X_API_SECRET }}
          X_ACCESS_TOKEN: ${{ secrets.X_ACCESS_TOKEN }}
          X_ACCESS_TOKEN_SECRET: ${{ secrets.X_ACCESS_TOKEN_SECRET }}

      # Passo 6: Salvar o estado atualizado para a próxima execução
      # O arquivo estado.json é salvo como um artifact para persistência.
      - name: 6. Salvando estado atualizado
        uses: actions/upload-artifact@v4
        with:
          name: bot-state
          path: estado.json
